// function timestamp() {
//   return new Date().toLocaleString("pt-BR", { timeZone: "America/Sao_Paulo" });
// }
// import {
//   makeWASocket,
//   useMultiFileAuthState as createMultiFileAuthState,
//   WASocket,
//   proto,
// } from "@whiskeysockets/baileys";
// import { pino } from "pino";
// import { PrismaClient } from "@prisma/client";
// import { generateSummary, parseMessage } from "../app/lib/openai";
// import { startDailySummary, startWeeklySummary } from "./scheduler";

// const prisma = new PrismaClient();
// const ALLOWED_PHONES = ["5521968577262", "5521994966227", "5521964090866"];

// async function handleResumo(
//   sock: WASocket,
//   phone: string,
//   user: { id: string },
//   text: string
// ) {
//   const meses = [
//     "janeiro",
//     "fevereiro",
//     "mar√ßo",
//     "abril",
//     "maio",
//     "junho",
//     "julho",
//     "agosto",
//     "setembro",
//     "outubro",
//     "novembro",
//     "dezembro",
//   ];

//   const textoMinusculo = text.toLowerCase();
//   const mesEncontrado = meses.find((mes) => textoMinusculo.includes(mes));

//   if (mesEncontrado || textoMinusculo.trim() === "resumo") {
//     const resumo = await generateSummary(user.id, mesEncontrado);
//     await sock.sendMessage(`${phone}@s.whatsapp.net`, { text: resumo });
//     console.log(
//       `[${timestamp()}] üìà [Resumo enviado] M√™s: ${
//         mesEncontrado || "Todos"
//       } | Usu√°rio: ${phone}`
//     );
//   } else {
//     await sock.sendMessage(`${phone}@s.whatsapp.net`, {
//       text: `‚ùå N√£o entendi o m√™s solicitado. Por favor, envie "Resumo abril", "Resumo maio", etc.`,
//     });
//   }
// }

// async function handleRegistroFinanceiro(
//   sock: WASocket,
//   phone: string,
//   user: { id: string },
//   text: string
// ) {
//   const parsed = await parseMessage(text);

//   if (parsed && typeof parsed.valor === "number" && parsed.valor > 0) {
//     const textoMinusculo = text.toLowerCase();
//     const tipo =
//       textoMinusculo.includes("recebi") ||
//       textoMinusculo.includes("ganhei") ||
//       textoMinusculo.includes("ganho")
//         ? "GANHO"
//         : "GASTO";

//     await prisma.message.create({
//       data: {
//         userId: user.id,
//         content: text,
//         amount: parsed.valor,
//         category: parsed.categoria,
//         type: tipo,
//       },
//     });

//     if (tipo === "GANHO") {
//       console.log(
//         `[${timestamp()}] ‚ûï [Ganho registrado] Valor: R$${
//           parsed.valor
//         } | Categoria: ${parsed.categoria} | Usu√°rio: ${phone}`
//       );
//       await sock.sendMessage(`${phone}@s.whatsapp.net`, {
//         text: `‚úÖ Ganho de R$${parsed.valor} em ${parsed.categoria} registrado com sucesso!`,
//       });
//     } else {
//       console.log(
//         `[${timestamp()}] ‚úÖ [Gasto registrado] Valor: R$${
//           parsed.valor
//         } | Categoria: ${parsed.categoria} | Usu√°rio: ${phone}`
//       );
//       await sock.sendMessage(`${phone}@s.whatsapp.net`, {
//         text: `‚úÖ Gasto de R$${parsed.valor} em ${parsed.categoria} registrado com sucesso!`,
//       });
//     }
//   } else {
//     await sock.sendMessage(`${phone}@s.whatsapp.net`, {
//       text: `Mensagem recebida! üì©`,
//     });
//   }
// }

// async function handleMessage(sock: WASocket, msg: proto.IWebMessageInfo) {
//   if (!msg.message || !msg.key.remoteJid) return;

//   const phone = msg.key.remoteJid.split("@")[0];
//   if (!ALLOWED_PHONES.includes(phone)) {
//     // await sock.sendMessage(msg.key.remoteJid!, {
//     //   text: `‚ùå Acesso n√£o autorizado.`,
//     // });
//     return;
//   }

//   const text = msg.message.conversation || "";
//   if (!text) return;

//   console.log(
//     `[${timestamp()}] üí¨ [Mensagem recebida] De: ${phone} | Conte√∫do: "${text}"`
//   );

//   const user = await prisma.user.upsert({
//     where: { phone },
//     update: {},
//     create: { phone },
//   });

//   // Onboarding autom√°tico para novo usu√°rio
//   const agora = new Date();
//   const diferencaSegundos =
//     (agora.getTime() - new Date(user.createdAt).getTime()) / 1000;
//   if (diferencaSegundos < 10) {
//     console.log(
//       `[${timestamp()}] üå± [Onboarding] Novo usu√°rio criado: ${phone}`
//     );
//     await sock.sendMessage(msg.key.remoteJid!, {
//       text: `üå± Bem-vindo(a) ao Flora Finance!\n\nComigo voc√™ pode:\n\nüí∏ Registrar seus gastos: "Gastei 50 reais no mercado"\nüìà Pedir um resumo: "Resumo abril" ou "Resumo"\n‚ùå Excluir um gasto: "Excluir alimenta√ß√£o 50"\nüîî Ativar ou desativar resumos autom√°ticos\n\nDigite */bot* para ver tudo o que voc√™ pode fazer! üöÄ`,
//     });
//   }

//   // Comando /bot
//   if (text.toLowerCase().startsWith("/bot")) {
//     await sock.sendMessage(msg.key.remoteJid!, {
//       text: `üåü *bot dispon√≠veis:*\n
// ‚Ä¢ */bot* ‚Äî Lista todos os comandos que voc√™ pode usar.
// ‚Ä¢ */ajuda* ‚Äî Explica como usar o Flora Finance e tirar o m√°ximo proveito.
// ‚Ä¢ */sejapro* ‚Äî Descubra as vantagens de se tornar um usu√°rio Pro.
// ‚Ä¢ *Resumo [m√™s]* ‚Äî Veja um resumo dos seus gastos de um m√™s (ex: "Resumo abril").
// ‚Ä¢ *Gastei [valor] no [local]* ‚Äî Registra rapidamente um novo gasto no sistema.
// ‚Ä¢ *Excluir [categoria] [valor]* ‚Äî Apaga um gasto espec√≠fico (ex: "Excluir alimenta√ß√£o 50").
// ‚Ä¢ *Ativar resumo* / *Desativar resumo* ‚Äî Controle o envio autom√°tico dos seus resumos di√°rios e semanais.

// Conte comigo para organizar suas finan√ßas! üå±üöÄ`,
//     });
//     return;
//   }

//   if (text.toLowerCase().startsWith("/ajuda")) {
//     await sock.sendMessage(msg.key.remoteJid!, {
//       text: `üõü *Central de Ajuda Flora Finance*\n\nComigo, voc√™ pode registrar seus gastos de forma simples apenas enviando mensagens naturais, como:\n
// - "Gastei 50 reais no mercado"\n
// - "Comprei gasolina 100 reais"\n
// Posso tamb√©m gerar resumos dos seus gastos e te dar dicas de economia!\n\nEnvie */comandos* para ver todas as op√ß√µes. üå±`,
//     });
//     return;
//   }

//   if (text.toLowerCase().startsWith("/sejapro")) {
//     await sock.sendMessage(msg.key.remoteJid!, {
//       text: `üöÄ *Vantagens de ser um usu√°rio Pro no Flora Finance:*\n\n‚Ä¢ Receba resumos di√°rios e semanais autom√°ticos!\n‚Ä¢ Tenha acompanhamento mais detalhado dos seus gastos.\n‚Ä¢ Suporte priorit√°rio.\n‚Ä¢ Novidades e recursos exclusivos primeiro!\n\nEm breve, enviaremos informa√ß√µes sobre como se tornar Pro! üåü`,
//     });
//     return;
//   }

//   if (text.toLowerCase().includes("ativar resumo")) {
//     await prisma.user.update({
//       where: { phone },
//       data: { enableSummary: true },
//     });

//     await sock.sendMessage(msg.key.remoteJid!, {
//       text: `‚úÖ Resumo autom√°tico ativado! Voc√™ come√ßar√° a receber resumos di√°rios e semanais.`,
//     });
//     return;
//   }

//   if (text.toLowerCase().includes("desativar resumo")) {
//     await prisma.user.update({
//       where: { phone },
//       data: { enableSummary: false },
//     });

//     await sock.sendMessage(msg.key.remoteJid!, {
//       text: `‚úÖ Resumo autom√°tico desativado! Voc√™ n√£o receber√° mais resumos autom√°ticos.`,
//     });
//     return;
//   }

//   if (
//     text.toLowerCase().includes("excluir") ||
//     text.toLowerCase().includes("deletar") ||
//     text.toLowerCase().includes("apagar")
//   ) {
//     const parsed = await parseMessage(text);

//     if (!parsed || typeof parsed.valor !== "number" || !parsed.categoria) {
//       await sock.sendMessage(msg.key.remoteJid!, {
//         text: `‚ùå N√£o consegui entender qual gasto voc√™ quer excluir. Tente algo como "Excluir alimenta√ß√£o 50".`,
//       });
//       return;
//     }

//     const registro = await prisma.message.findFirst({
//       where: {
//         userId: user.id,
//         amount: parsed.valor,
//         category: parsed.categoria,
//       },
//       orderBy: { createdAt: "desc" },
//     });

//     if (!registro) {
//       await sock.sendMessage(msg.key.remoteJid!, {
//         text: `‚ùå N√£o encontrei um registro de R$${parsed.valor} em "${parsed.categoria}".`,
//       });
//       return;
//     }

//     await prisma.message.delete({
//       where: { id: registro.id },
//     });

//     const tipoEmoji = registro.type === "GANHO" ? "‚ûï" : "‚ûñ";
//     const tipoTexto = registro.type === "GANHO" ? "Ganho" : "Gasto";

//     console.log(
//       `[${timestamp()}] üóëÔ∏è [${tipoTexto} exclu√≠do] Valor: R$${
//         parsed.valor
//       } | Categoria: ${parsed.categoria} | Usu√°rio: ${phone}`
//     );

//     await sock.sendMessage(msg.key.remoteJid!, {
//       text: `‚úÖ ${tipoTexto} exclu√≠do com sucesso!\n${tipoEmoji} Valor: R$${parsed.valor}\nüìÇ Categoria: ${parsed.categoria}`,
//     });
//     return;
//   }

//   if (text.toLowerCase().includes("resumo")) {
//     await handleResumo(sock, phone, user, text);
//   } else {
//     await handleRegistroFinanceiro(sock, phone, user, text);
//   }
// }

// async function startBot() {
//   const { state, saveCreds } = await createMultiFileAuthState("./sessions");
//   const sock = makeWASocket({
//     auth: state,
//     printQRInTerminal: true,
//     browser: ["WhatsApp", "Windows", "10.0"],
//     logger: pino({ level: "silent" }),
//   });

//   sock.ev.on("creds.update", saveCreds);
//   startDailySummary(sock);
//   startWeeklySummary(sock);

//   sock.ev.on("connection.update", ({ connection }) => {
//     if (connection === "close") {
//       console.log(
//         `[${timestamp()}] üî¥ [Conex√£o] Bot desconectado. Tentando reconectar...`
//       );
//       startBot();
//     } else if (connection === "open") {
//       console.log(`[${timestamp()}] üü¢ [Conex√£o] Bot conectado com sucesso!`);
//     }
//   });

//   sock.ev.on("messages.upsert", async ({ messages, type }) => {
//     if (type !== "notify") return;

//     const msg = messages[0];
//     if (!msg.messageTimestamp) return;

//     const agora = Math.floor(Date.now() / 1000); // Timestamp atual em segundos
//     const diferencaSegundos = agora - Number(msg.messageTimestamp);

//     if (diferencaSegundos > 600) {
//       // 10 minutos
//       console.log(
//         `[${timestamp()}] ‚ö†Ô∏è Ignorando mensagem antiga (${diferencaSegundos}s atr√°s) de ${
//           msg.key.remoteJid
//         }`
//       );
//       return;
//     }

//     await handleMessage(sock, msg);
//   });
// }

// startBot();
